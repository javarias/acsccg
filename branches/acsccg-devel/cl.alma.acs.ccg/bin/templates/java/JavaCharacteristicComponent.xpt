«IMPORT uml»
«IMPORT AlmaGenerator»

«EXTENSION templates::java::xJavaUtil»

«DEFINE Root FOR uml::Class»
    «EXPAND JAVAChComp FOR this»
«ENDDEFINE»

«DEFINE JAVAChComp FOR uml::Class»
    «FILE 'src/alma/acsgenerator/'+this.package.name+"/"+this.name+"Base.java"»

package alma.acsgenerator.«this.package.name»;

import java.util.logging.Logger;
import alma.ACS.ComponentStates;
import alma.acs.component.ComponentLifecycle;
import alma.acs.container.ContainerServices;
import alma.ACS.*;
import alma.ACS.jbaci.*;
import alma.ACS.impl.*;
import alma.acs.component.ComponentLifecycleException;
import alma.ACSErrTypeCommon.wrappers.AcsJCouldntPerformActionEx;
import alma.ACSErr.CompletionHolder;
import alma.«this.package.name».«this.name»BaseOperations;
«REM»Get the idl struct from the model, and add the to the imports«ENDREM»
«FOREACH this.eRootContainer.eContents.typeSelect(uml::Class) AS class-»
    «IF isIDLStruct(class)-»
import alma.«this.package.name».«class.name-»;
    «ENDIF-»
«ENDFOREACH-»
«PROTECT CSTART '/*' CEND '*/' ID this.name+"ProtectedImports"»
/* (non-javadoc!)
 * Autogenerated protected region, the imports in this protected area
 * are not generated, it's reserved for special features that they can't be
 * specified in the UML model
 */
«ENDPROTECT»

public class «this.name»Base extends CharacteristicComponentImpl implements «this.name»BaseOperations«IF haveInterfaces(this)»«FOREACH this.getAllImplementedInterfaces() AS interface», «interface.name»«ENDFOREACH-»«ENDIF»
{
    protected ContainerServices m_containerServices;
    protected Logger m_logger;
    «FOREACH this.getAllAttributes() AS attr»
        «IF isROProperty( attr ) »
    protected RO«attr.type.name» «attr.name»;
    protected DataAccess «attr.name»DataAccess = new MemoryDataAccess();
        «ELSEIF isRWProperty(attr )-»
    protected RW«attr.type.name» «attr.name»;
    protected DataAccess «attr.name»DataAccess = new MemoryDataAccess();
        «ELSE-»
    protected «attr.type.name» «attr.name»;
        «ENDIF-»
    «ENDFOREACH-»
    
    «PROTECT CSTART '/*' CEND '*/' ID this.name+"ProtectedAttributes"»
	/* (non-javadoc!)
	 * Autogenerated protected region, the imports in this protected area
	 * are not generated, it's reserved for special features that they can't be
	 * specified in the UML model
	 */
	«ENDPROTECT»
    
    /* 
     * Implementation of  ComponentLifecycle
     */
    public void initialize(ContainerServices containerServices) throws ComponentLifecycleException {
        m_containerServices = containerServices;
        m_logger = m_containerServices.getLogger();
        super.initialize(containerServices);
        try {
     «FOREACH this.getAllAttributes() AS attr»
        «IF isROProperty( attr ) -»
        RO«attr.type.name»Impl «attr.name»Impl = new RO«attr.type.name»Impl("«attr.name»", this, «attr.name»DataAccess);
        RO«attr.type.name»POATie «attr.name»Tie = new RO«attr.type.name»POATie(«attr.name»Impl);
        «attr.name» = RO«attr.type.name»Helper.narrow(this.registerProperty(«attr.name»Impl,«attr.name»Tie)); 
        «ELSEIF isRWProperty( attr )-»
        RW«attr.type.name»Impl «attr.name»Impl = new RW«attr.type.name»Impl("«attr.name»", this, «attr.name»DataAccess);
        RW«attr.type.name»POATie «attr.name»Tie = new RW«attr.type.name»POATie(«attr.name»Impl);
        «attr.name» = RW«attr.type.name»Helper.narrow(this.registerProperty(«attr.name»Impl,«attr.name»Tie));  
        «ENDIF-»
    «ENDFOREACH-»
    	}
		catch (Throwable th)
		{
			throw new ComponentLifecycleException("Failed to create properties.", th); 
		}
        
    }
    
    public void execute() {
        m_logger.info("execute() called...");
    }
    
    public void cleanUp() {
        m_logger.info("cleanUp() called...");
    }
    
    public void aboutToAbort() {
        cleanUp();
        m_logger.info("aboutToAbort() called...");
    }
    
    // Implementation of ACSComponent
    
    public ComponentStates componentState() {
        return m_containerServices.getComponentStateManager().getCurrentState();
    }
    
    public String name() {
        return m_containerServices.getName();
    }
    
    «FOREACH this.getAllAttributes() AS attr»
        «IF isROProperty( attr )-»
    «PROTECT CSTART '/*' CEND '*/' ID "RO"+attr.type.name»
    public RO«attr.type.name» «attr.name»() {
         return «attr.name»;
    }
    «ENDPROTECT»
        «ELSEIF isRWProperty( attr )-»
    «PROTECT CSTART '/*' CEND '*/' ID "RW"+attr.type.name»
    public RW«attr.type.name» «attr.name»() {
         return «attr.name»;
    }
     «ENDPROTECT»
        «ENDIF-»
    «ENDFOREACH»
    
    /* 
     * Definition of member «this.name»Operations
     */
    «FOREACH this.getOperations() AS operation»
    «PROTECT CSTART '/*' CEND '*/' ID operation.name»  
    «IF isAsynchronous(operation) -»
    public void «operation.name»(CBvoid callback, CBDescIn desc) {
	    new ReflectionBACIAction(this, this, getClass(), "«operation.name»Impl", callback, desc).submit();
    }
    public «operation.type.name» «operation.name»Impl(
    «ELSE-»
    public «operation.type.name» «operation.name»(
    «ENDIF-»
    «FOREACH operation.ownedParameter.select(e|e.direction.toString()!= 'return') AS param SEPARATOR ', '-»
           «param.type.name» «param.name»
    «ENDFOREACH-»
    ) {
    «IF operation.type.name.toLowerCase() != "void"-»
        return null;
    «ENDIF-»
    }
    «ENDPROTECT»
    «ENDFOREACH-»
    
    /*
     * Interface Methods
     */
    «IF haveInterfaces(this)-»
	«EXPAND Implements::Root FOR this-» 
	«ENDIF-»
    
    «PROTECT CSTART '/*' CEND '*/' ID this.name+"ProtectedRegions"»
	/* (non-javadoc!)
	 * Autogenerated protected region, the implementations in this protected area
	 * are not generated, it's reserved to special features that they can't be
	 * specified in the UML model
	 */
    «ENDPROTECT»
}
  «ENDFILE»
«ENDDEFINE»
    