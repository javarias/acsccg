package cl.alma.acsccg.example6;

import java.util.logging.Level;
import java.util.logging.Logger;
import alma.ACS.ComponentStates;
import alma.acs.component.ComponentLifecycle;
import alma.acs.component.ComponentLifecycleException;
import alma.acs.container.ContainerServices;
import alma.ACSErrTypeCommon.CouldntPerformActionEx;
import alma.ACSErrTypeCommon.wrappers.AcsJCouldntPerformActionEx;
import alma.example6.VertexAntennaBaseOperations;

/*PROTECTED REGION ID(VertexAntenna.ProtectedImports) ENABLED START*/
/* (non-javadoc!)
 * Autogenerated protected region, the imports in this protected area
 * are not generated, it's reserved to special features that they can't be
 * specified in the UML model
 */
/*PROTECTED REGION END*/

/* IDL Structs*/
import alma.example6.position_struct;

/*Notification Channel*/
import alma.acs.nc.SimpleSupplier;
import alma.example6.testMessageBlockEvent;

public class VertexAntennaBase extends BasicAntennaBase
		implements
			ComponentLifecycle,
			VertexAntennaBaseOperations {

	private ContainerServices m_containerServices;
	private Logger m_logger;
	private SimpleSupplier m_supplier;

	/*PROTECTED REGION ID(VertexAntenna.ProtectedAttributes) ENABLED START*/
	/* (non-javadoc!)
	 * Autogenerated protected region, the imports in this protected area
	 * are not generated, it's reserved for special features that they can't be
	 * specified in the UML model
	 */
	/*PROTECTED REGION END*/

	/* 
	 * Implementation of  ComponentLifecycle
	 */
	public void initialize(ContainerServices containerServices) {

		m_containerServices = containerServices;

		super.initialize(containerServices);

		m_logger = m_containerServices.getLogger();
		m_logger.info("initialize() called...");

		try {
			// Instantiate our supplier
			m_supplier = new SimpleSupplier(
					alma.example6.CHANNELNAME_DEFAULTEXAMPLE6CHANNEL.value,
					m_containerServices);
		} catch (Exception e) {
			//throw new ComponentLifecycleException("failed to create SimpleSupplier for channel " + alma.example6.CHANNELNAME_DEFAULTEXAMPLE6CHANNEL.value, e);
		}

		/*PROTECTED REGION ID(VertexAntenna.ProtectedAttributes) ENABLED START*/
		/* (non-javadoc!)
		 * Autogenerated protected region, the imports in this protected area
		 * are not generated, it's reserved for special features that they can't be
		 * specified in the UML model
		 */
		/*PROTECTED REGION END*/
	}

	public void sendEvents() throws CouldntPerformActionEx {
		m_logger.info("Now sending  testMessageBlockEvent events...");
		try {
			testMessageBlockEvent event = new testMessageBlockEvent(Math
					.random(), "Event");
			m_supplier.publishEvent(event);
		} catch (Throwable thr) {
			m_logger
					.log(Level.WARNING,
							"failed to send testMessageBlockEvent. Will not try again.");
			throw (new AcsJCouldntPerformActionEx(thr))
					.toCouldntPerformActionEx();
		}
	}

	public void execute() {
		m_logger.info("execute() called...");
	}

	public void cleanUp() {
		m_logger.info("cleanUp() called...");
	}

	public void aboutToAbort() {
		cleanUp();
		m_logger.info("aboutToAbort() called...");
	}

	/* 
	 * Implementation of ACSComponent
	 */
	public ComponentStates componentState() {
		return m_containerServices.getComponentStateManager().getCurrentState();
	}

	public String name() {
		return m_containerServices.getName();
	}

	/* 
	 * Definition of member VertexAntennaOperations
	 */

	public String getVertexID() {
		/*PROTECTED REGION ID(VertexAntenna.getVertexID) ENABLED START*/
		return new String();
		/*PROTECTED REGION END*/
	}

	/*
	 * Override inherited methods
	 */

	@Override
	public void setAntennaPosition(position_struct position) {
		/*PROTECTED REGION ID(VertexAntenna.setAntennaPosition) ENABLED START*/

		/*PROTECTED REGION END*/
	}

	@Override
	public position_struct getAntennaPosition() {
		/*PROTECTED REGION ID(VertexAntenna.getAntennaPosition) ENABLED START*/
		return new position_struct();
		/*PROTECTED REGION END*/
	}

	/*
	 * Implements the Interface methods.
	 */

	/*PROTECTED REGION ID(VertexAntenna.ProtectedRegion) ENABLED START*/
	/* (non-javadoc!)
	 * Autogenerated protected region, the implementations in this protected area
	 * are not generated, it's reserved to special features that they can't be
	 * specified in the UML model
	 */
	/*PROTECTED REGION END*/
}
