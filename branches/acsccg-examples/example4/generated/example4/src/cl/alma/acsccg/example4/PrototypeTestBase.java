package cl.alma.acsccg.example4;

import java.util.logging.Logger;
import alma.ACS.ComponentStates;
import alma.acs.component.ComponentLifecycle;
import alma.acs.container.ContainerServices;
import alma.example4.PrototypeTestBaseOperations;

/*PROTECTED REGION ID(PrototypeTest.ProtectedImports) ENABLED START*/
/* (non-javadoc!)
 * Autogenerated protected region, the imports in this protected area
 * are not generated, it's reserved to special features that they can't be
 * specified in the UML model
 */
/*PROTECTED REGION END*/

import alma.example4.sensor_status_struct;
import alma.example4.antenna_status_struct;
import alma.example4.position_struct;

public class PrototypeTestBase extends TestAntennaBase
		implements
			ComponentLifecycle,
			PrototypeTestBaseOperations {

	private ContainerServices m_containerServices;
	private Logger m_logger;

	/*PROTECTED REGION ID(PrototypeTest.ProtectedAttributes) ENABLED START*/
	/* (non-javadoc!)
	 * Autogenerated protected region, the imports in this protected area
	 * are not generated, it's reserved for special features that they can't be
	 * specified in the UML model
	 */
	/*PROTECTED REGION END*/

	/* 
	 * Implementation of  ComponentLifecycle
	 */
	public void initialize(ContainerServices containerServices) {
		m_containerServices = containerServices;
		m_logger = m_containerServices.getLogger();
		m_logger.info("initialize() called...");
	}

	public void execute() {
		m_logger.info("execute() called...");
	}

	public void cleanUp() {
		m_logger.info("cleanUp() called...");
	}

	public void aboutToAbort() {
		cleanUp();
		m_logger.info("aboutToAbort() called...");
	}

	/* 
	 * Implementation of ACSComponent
	 */
	public ComponentStates componentState() {
		return m_containerServices.getComponentStateManager().getCurrentState();
	}

	public String name() {
		return m_containerServices.getName();
	}

	/* 
	 * Definition of member PrototypeTestOperations
	 */

	public boolean getTestStatus() {
		/*PROTECTED REGION ID(PrototypeTest.getTestStatus) ENABLED START*/
		return false;
		/*PROTECTED REGION END*/
	}

	/*
	 * Override inherited methods
	 */

	@Override
	public String getTestID() {
		/*PROTECTED REGION ID(PrototypeTest.getTestID) ENABLED START*/
		return new String();
		/*PROTECTED REGION END*/
	}

	/*
	 * Implements the Interface methods.
	 */

	/*PROTECTED REGION ID(PrototypeTest.ProtectedRegion) ENABLED START*/
	/* (non-javadoc!)
	 * Autogenerated protected region, the implementations in this protected area
	 * are not generated, it's reserved to special features that they can't be
	 * specified in the UML model
	 */
	/*PROTECTED REGION END*/
}
