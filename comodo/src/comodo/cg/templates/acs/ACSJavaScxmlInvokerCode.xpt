«REM»
/**
 * COMODO - Multiplatform Component Code Generator 
 * Copyright (C) 2010/2011  Alexis Tejeda, alexis.tejeda@gmail.com
 * in colaboration with ESO.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
 *
 * who          when      		what
 * ---------    -----------     ------------------------------------------------
 * nmigliorini 	2011-00-00  	Created
 * atejeda 	    2011-03-29  	Modified name extension
 * 
 * $Id$
 */
«ENDREM»

«IMPORT uml»

«EXTENSION cg::templates::zzutil::scxmlutil»
«EXTENSION cg::templates::zzutil::zzzacshelpers»

«REM» JavaInvoker «ENDREM»
«DEFINE JavaInvoker FOR StateMachine»

«FILE getPackage(this.getModel()).name+"/scxml/"+this.name+"/java/JavaInvoker.java"»

import java.util.Map;

import org.apache.commons.scxml.SCInstance;
import org.apache.commons.scxml.TriggerEvent;
import org.apache.commons.scxml.invoke.Invoker;
import org.apache.commons.scxml.invoke.InvokerException;

public class JavaInvoker implements Invoker {
	
	String mSource;
	String parentStateId;
	SCInstance parentSCInstance;
	Thread mThread = null;
	ActivityThread myJob = null;
	
	@Override
	public void setParentStateId(String parentStateId) {
		this.parentStateId = parentStateId;
	}

	@Override
	public void setSCInstance(SCInstance scInstance) {
		this.parentSCInstance = scInstance;

	}

	@Override
	public void invoke(String source, Map params) throws InvokerException {
		
		String parts[] = source.split("/");
		System.out.println( parts[parts.length-1] );
		this.mSource = parts[parts.length-1];
		
		«FOREACH this.allOwnedElements().typeSelect(State).doActivity.select(e|!(e.name.toString()=="null")) AS doact»
		if (this.mSource.contentEquals("MyThread«doact.name».java")) {
			myJob = new MyThread«doact.name»(parentStateId, parentSCInstance);
		} else
		«ENDFOREACH»
		{{System.out.println("Error with invoke");  
		System.out.println( "mSource: " + this.mSource );  };
		}
		
		mThread = new Thread(myJob);
		mThread.start();
		System.out.println("Done with Invoke, threadId " + mThread.getName());
	}

	@Override
	public void parentEvents(TriggerEvent[] evts) throws InvokerException {
		// TODO Auto-generated method stub

	}

	@Override
	public void cancel() throws InvokerException {
		System.out.println("Leaving state " + parentStateId
				+ ". In Cancel for ID " + mSource);
		if (mThread != null) {
			myJob.stop(mThread);	
		} else {
			System.out.println("mThread is NULL!");
		}
	}

}
«ENDFILE»

«FILE getPackage(this.getModel()).name+"/scxml/"+this.name+"/java/DoActivitiesMap.txt"»

«FOREACH this.allOwnedElements().typeSelect(State).doActivity.select(e|!(e.name.toString()=="null")) AS doact-»
«doact.name»	MyThread«doact.name».class
«ENDFOREACH-»

«FOREACH this.allOwnedElements().typeSelect(State).doActivity.select(e|!(e.name.toString()=="null")).name.toSet() AS a»
«a»
«ENDFOREACH-»
«ENDFILE»

«ENDDEFINE»
