«REM»
/** 
 * COMODO - Multiplatform Component Code Generator 
 *    (c) European Southern Observatory, 2011 
 *    Copyright by ESO 
 *    All rights reserved 
 * 
 * Author: Nicola Migliorini / Alexis Tejeda
 * 
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * $Id$
 * 
 */
«ENDREM»

«IMPORT uml»

«EXTENSION cg::templates::zzutil::scxmlutil»
«EXTENSION cg::templates::zzutil::zzzacshelpers»

«DEFINE ActivityThread FOR StateMachine»

«FILE getPackage(this.getModel()).name+"/scxml/"+this.name+"/java/"+"ActivityThread.java"»

import org.apache.commons.scxml.SCInstance;
import org.apache.commons.scxml.TriggerEvent;
import org.apache.commons.scxml.model.ModelException;

// Generic class for activity threads 

public class ActivityThread implements Runnable {
	
	String mParentStateId;
	SCInstance mParentSCInstance;
	volatile boolean mIsRunning;
	
	public ActivityThread(String parentStateId, SCInstance parentSCInstance) {
		mParentStateId = parentStateId;
		mParentSCInstance = parentSCInstance;
		mIsRunning = false;
	}

	@Override
	public void run() {
		System.out.println("Generic run() implementation in ActivityThread" );
		mIsRunning = true;
		try {
			while (mIsRunning) {
				
				//Implementation of a generic run()
				Thread.sleep(1000);
				System.out.print(".");
				
			}
			// Special *.invoke.done message for the parent state
			System.out.println("Done with Thread.. Sending message to parent state (" + mParentStateId + ")");
			mParentSCInstance.getExecutor().triggerEvent(new TriggerEvent(mParentStateId + ".invoke.done", TriggerEvent.SIGNAL_EVENT));
		} catch (InterruptedException ex) {
			ex.printStackTrace();
		} catch (ModelException me) {
			me.printStackTrace();
		}
	}

	public void stop(Thread threadId) {
		// Boolean used to stop the threads
		mIsRunning = false;
		System.out.println("Cancel threadId " + threadId.getName());
	}
}
 
«ENDFILE» 
«ENDDEFINE»

«DEFINE InvActivity FOR State»

«FILE getPackage(this.getModel()).name+"/scxml/"+this.name+"/java/"+"MyThread"+this.doActivity.name+".java"»

import org.apache.commons.scxml.SCInstance;
import org.apache.commons.scxml.TriggerEvent;
import org.apache.commons.scxml.model.ModelException;

public class MyThread«this.doActivity.name» extends ActivityThread {

public MyThread«this.doActivity.name»(String parentStateId, SCInstance parentSCInstance) {
		super(parentStateId, parentSCInstance);
	}

	@Override
	//Starting the thread
	public void run() {
		
		//JUST FOR TESTING
		System.out.println("Starting with «this.doActivity.name»" );
		mIsRunning = true;
		try {
			while (mIsRunning) {
				// TODO: Put your implementation for the Activity
				//JUST FOR TESTING
				Thread.sleep(1000);
				System.out.print(".");
				//JUST FOR TESTING
			}
			// Special *.invoke.done message for the parent state
			System.out.println("Done with Thread.. Sending message to parent state (" + mParentStateId + ")");
			mParentSCInstance.getExecutor().triggerEvent(new TriggerEvent(mParentStateId + ".invoke.done", TriggerEvent.SIGNAL_EVENT));
		} catch (InterruptedException ex) {
			ex.printStackTrace();
		} catch (ModelException me) {
			me.printStackTrace();
		}
	}

	//The implementation for stopping the thread is in ActivityThread
	
}
«ENDFILE»
«ENDDEFINE»