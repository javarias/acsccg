«REM»
/**
 * COMODO - Multiplatform Component Code Generator 
 * Copyright (C) 2010/2011  Alexis Tejeda, alexis.tejeda@gmail.com
 * in colaboration with ESO.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
 *
 * who          when      		what
 * ---------    -----------     ------------------------------------------------
 * nmigliorini 	2011-00-00  	Created
 * atejeda 	    2011-03-29  	Modified name extension
 * 
 * $Id$
 */
«ENDREM»

«IMPORT uml»

«EXTENSION cg::templates::zzutil::scxmlutil»
«EXTENSION cg::templates::zzutil::zzzacshelpers»

«REM»List for custom actions«ENDREM»
«DEFINE CActionList FOR StateMachine»

«FILE getPackage(this.getModel()).name+"/scxml/"+this.name+"/java/"+this.name+"ActionList.java"»

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.scxml.model.CustomAction;


public class «this.name»ActionList {

	
	List<CustomAction> getActions() {

		List<CustomAction> customActions = new ArrayList<CustomAction>();
		// Build the list of custom actions and map every action to a class
		//("http://my.custom-actions.domain/CUSTOM", myCustomAction, MyCustomAction.class)
		«FOREACH this.allOwnedElements().typeSelect(State).entry.select(e|!(e.name.toString()=="null")) AS entAct ITERATOR iter»
		CustomAction ca«iter.counter1» = new CustomAction(
				"http://my.custom-actions.domain/CUSTOM", "«entAct.name»", CA«entAct.name».class);
		customActions.add(ca«iter.counter1»);
		«ENDFOREACH»
		«FOREACH this.allOwnedElements().typeSelect(State).exit.select(e|!(e.name.toString()=="null")) AS exAct ITERATOR iter»
		CustomAction cae«iter.counter1» = new CustomAction(
				"http://my.custom-actions.domain/CUSTOM", "«exAct.name»", CA«exAct.name».class);
		customActions.add(cae«iter.counter1»);
		«ENDFOREACH»
		«FOREACH this.allOwnedElements().typeSelect(Transition).select(e|(e.hasAction())).ownedElement.typeSelect(Activity) AS trAct ITERATOR iter»
		CustomAction catr«iter.counter1» = new CustomAction(
				"http://my.custom-actions.domain/CUSTOM", "«trAct.name»", CA«trAct.name».class);
		customActions.add(catr«iter.counter1»);
		«ENDFOREACH»

		
		return customActions;
	}
}
«ENDFILE»

«FILE getPackage(this.getModel()).name+"/scxml/"+this.name+"/java/"+"CustomActionListMap.txt"»

«FOREACH this.allOwnedElements().typeSelect(State).entry.select(e|!(e.name.toString()=="null")) AS entAct-»
«entAct.name»		«entAct.name».class
«ENDFOREACH-»
«FOREACH this.allOwnedElements().typeSelect(State).exit.select(e|!(e.name.toString()=="null")) AS exAct-»
«exAct.name»		«exAct.name».class
«ENDFOREACH-»
«FOREACH this.allOwnedElements().typeSelect(Transition).select(e|(e.hasAction())).ownedElement.typeSelect(Activity) AS trAct-»
«trAct.name»		«trAct.name».class
«ENDFOREACH-»
«ENDFILE»
«ENDDEFINE»


«DEFINE JCAEntry FOR State»

«FILE getPackage(this.getModel()).name+"/scxml/"+this.name+"/java/"+"CA"+this.entry.name+".java"»

import java.util.Collection;

import org.apache.commons.logging.Log;
import org.apache.commons.scxml.ErrorReporter;
import org.apache.commons.scxml.EventDispatcher;
import org.apache.commons.scxml.SCInstance;
import org.apache.commons.scxml.SCXMLExpressionException;
import org.apache.commons.scxml.model.Action;
import org.apache.commons.scxml.model.ModelException;

public class CA«this.entry.name» extends Action {
	
    /** Serial version UID. */
    private static final long serialVersionUID = 1L;

	private String mName;
	
	public CA«this.entry.name»() {
        super();
    }
 
   	/**
     * Get the name.
     *
     * @return Returns the name.
     */
    public String getName() {
        return mName;
    }

    /**
     * Set the name.
     *
     * @param name The name to set.
     */
    public void setName(String name) {
    	mName = name;
    }	
    
    public void execute(final EventDispatcher evtDispatcher,
            final ErrorReporter errRep, final SCInstance scInstance,
            final Log appLog, @SuppressWarnings("rawtypes") final Collection derivedEvents)
    throws ModelException, SCXMLExpressionException {
        if (appLog.isInfoEnabled()) {
            appLog.info("class: CA«this.entry.name», method: execute, attribute name: " + mName);
        }
    }

}
		
	«ENDFILE»
«ENDDEFINE»	

«DEFINE JCAExit FOR State»

«FILE getPackage(this.getModel()).name+"/scxml/"+this.name+"/java/"+"CA"+this.exit.name+".java"»

import java.util.Collection;

import org.apache.commons.logging.Log;
import org.apache.commons.scxml.ErrorReporter;
import org.apache.commons.scxml.EventDispatcher;
import org.apache.commons.scxml.SCInstance;
import org.apache.commons.scxml.SCXMLExpressionException;
import org.apache.commons.scxml.model.Action;
import org.apache.commons.scxml.model.ModelException;

public class CA«this.exit.name» extends Action {
	
    /** Serial version UID. */
    private static final long serialVersionUID = 1L;

	private String mName;
	
	public CA«this.exit.name»() {
        super();
    }
 
   	/**
     * Get the name.
     *
     * @return Returns the name.
     */
    public String getName() {
        return mName;
    }

    /**
     * Set the name.
     *
     * @param name The name to set.
     */
    public void setName(String name) {
    	mName = name;
    }	
    
    public void execute(final EventDispatcher evtDispatcher,
            final ErrorReporter errRep, final SCInstance scInstance,
            final Log appLog, @SuppressWarnings("rawtypes") final Collection derivedEvents)
    throws ModelException, SCXMLExpressionException {
        if (appLog.isInfoEnabled()) {
            appLog.info("class: CA«this.exit.name», method: execute, attribute name: " + mName);
        }
    }

}
		
	«ENDFILE»
«ENDDEFINE»	

«DEFINE JCATran FOR Transition»

«FILE getPackage(this.getModel()).name+"/scxml/"+this.name+"/java/"+"CA"+this.ownedElement.typeSelect(Activity).get(0).name+".java"»

import java.util.Collection;

import org.apache.commons.logging.Log;
import org.apache.commons.scxml.ErrorReporter;
import org.apache.commons.scxml.EventDispatcher;
import org.apache.commons.scxml.SCInstance;
import org.apache.commons.scxml.SCXMLExpressionException;
import org.apache.commons.scxml.model.Action;
import org.apache.commons.scxml.model.ModelException;

public class CA«this.allOwnedElements().typeSelect(Activity).get(0).name» extends Action {
	
    /** Serial version UID. */
    private static final long serialVersionUID = 1L;

	private String mName;
	
	public CA«this.allOwnedElements().typeSelect(Activity).get(0).name»() {
        super();
    }
 
   	/**
     * Get the name.
     *
     * @return Returns the name.
     */
    public String getName() {
        return mName;
    }

    /**
     * Set the name.
     *
     * @param name The name to set.
     */
    public void setName(String name) {
    	mName = name;
    }	
    
    public void execute(final EventDispatcher evtDispatcher,
            final ErrorReporter errRep, final SCInstance scInstance,
            final Log appLog, @SuppressWarnings("rawtypes") final Collection derivedEvents)
    throws ModelException, SCXMLExpressionException {
        if (appLog.isInfoEnabled()) {
            appLog.info("class: CA«this.allOwnedElements().typeSelect(Activity).get(0).name», method: execute, attribute name: " + mName);
        }
    }

}
		
	«ENDFILE»
«ENDDEFINE»	


