«IMPORT uml»
«EXTENSION templates::util::common»
«EXTENSION templates::util::java»

«DEFINE Root FOR uml::Model»

«FOREACH getEComponentsImpl(getPackage(this)) AS eElement -»
«FILE  getPackage(this).name+'/src/alma/'+getPackage(this).name+'/'+eElement.name+'.java'-»
package alma.«getPackage(this).name»;

import java.util.logging.Level;
import java.util.logging.Logger;
import alma.ACS.ComponentStates;
import alma.acs.component.ComponentLifecycle;
import alma.acs.component.ComponentLifecycleException;
import alma.acs.container.ContainerServices;
import alma.ACSErrTypeCommon.CouldntPerformActionEx;
import alma.ACSErrTypeCommon.wrappers.AcsJCouldntPerformActionEx;

import alma.«getPackage(this).name».*;
«FOREACH getEManifestations(eElement) AS eManifestationContainer-»
«FOREACH getESuppliers(eManifestationContainer) AS eManifestationClass-»
«FOREACH ((uml::Class) eManifestationClass).getAllImplementedInterfaces() AS eInterface-»
import alma.«getPackage(this).name».«eInterface.name»;
import alma.«getPackage(this).name».«eInterface.name»Operations;
«ENDFOREACH-»
«ENDFOREACH-»
«ENDFOREACH-»

public class «eElement.name» implements ComponentLifecycle 
	«FOREACH getEManifestations(eElement) AS eManifestationContainer-»
	«FOREACH getESuppliers(eManifestationContainer) AS eManifestationClass-»
	«FOREACH ((uml::Class) eManifestationClass).getAllImplementedInterfaces() AS eInterface-»
	,«eInterface.name»Operations
	«ENDFOREACH-»
	«ENDFOREACH-»
	«ENDFOREACH-»
{

	private ContainerServices m_containerServices;
    private Logger m_logger;

    /////////////////////////////////////////////////////////////
	// Implementation of ComponentLifecycle
	/////////////////////////////////////////////////////////////
	 
	public void initialize(ContainerServices containerServices)
	{
		m_containerServices = containerServices;
		m_logger = m_containerServices.getLogger();
        m_logger.info("initialize() called...");
	}
	
	public void execute() 
	{
        m_logger.info("execute() called...");
    }
    
    public void cleanUp() 
    {
        m_logger.info("cleanUp() called...");
    }
    
    public void aboutToAbort() 
    {
        cleanUp();
        m_logger.info("aboutToAbort() called...");
    }
    
	/////////////////////////////////////////////////////////////
	// Implementation of ACSComponent
	/////////////////////////////////////////////////////////////

    public ComponentStates componentState() 
    {
        return m_containerServices.getComponentStateManager().getCurrentState();
    }
    
    public String name() 
    {
        return m_containerServices.getName();
    }
   
	«FOREACH getEManifestations(eElement) AS eManifestationContainer-»
	«FOREACH getESuppliers(eManifestationContainer) AS eManifestationClass-»
	«FOREACH ((uml::Class) eManifestationClass).getAllImplementedInterfaces() AS eInterface-»
	/////////////////////////////////////////////////////////////
	// Implementation of «eInterface.name»Operations
	/////////////////////////////////////////////////////////////
	
	«FOREACH eInterface.getOperations() AS eOperation-»
	public «getJavaReturnType(eOperation)» «eOperation.name-»(«FOREACH eOperation.ownedParameter.select(e|e.direction.toString()!= 'return') AS param SEPARATOR ', '-»«getJavaParam(param)» «param.name»«ENDFOREACH-») 
    {
    	«IF !isVoid(eOperation)»return «getReturnValue(eOperation)»;«ENDIF»  
	}
	
	«ENDFOREACH-»
	
	«ENDFOREACH-»
	«ENDFOREACH-»
	«ENDFOREACH-»
} 
«ENDFILE»
«ENDFOREACH»
«ENDDEFINE»