«IMPORT uml»
«EXTENSION templates::util::common»
«EXTENSION templates::util::java»

«DEFINE Root FOR uml::Model»

«FOREACH getEComponentsImpl(getPackage(this)) AS eElement -»
«FILE  getPackage(this).name+'/src/alma/'+getPackage(this).name+'/'+eElement.name+'.java'-»
/*******************************************************************************
*    ALMA - Atacama Large Millimiter Array
*
*    (c) European Southern Observatory, 2002
*    Copyright by ESO (in the framework of the ALMA collaboration)
*    and Cosylab 2002, All rights reserved
*
*    This library is free software; you can redistribute it and/or
*    modify it under the terms of the GNU Lesser General Public
*    License as published by the Free Software Foundation; either
*    version 2.1 of the License, or (at your option) any later version.
*
*    This library is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
*    Lesser General Public License for more details.
*
*    You should have received a copy of the GNU Lesser General Public
*    License along with this library; if not, write to the Free Software
*    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
*
*
* "@(#) $Id: «eElement.name».java,v 0.00  0000-00-00 00:00:00  ZZZ $"
*
* who       when      what
* --------  --------  ----------------------------------------------
*/

package alma.«getPackage(this).name»;

import java.util.logging.Level;
import java.util.logging.Logger;

import alma.acs.container.ContainerServices;
import alma.acs.component.ComponentLifecycle;
import alma.acs.component.ComponentLifecycleException;

import alma.ACS.ComponentStates;
import alma.ACSErrTypeCommon.CouldntPerformActionEx;
import alma.ACSErrTypeCommon.wrappers.AcsJCouldntPerformActionEx;

import alma.«getPackage(this).name».*;
«FOREACH getERealizations(eElement) AS eInterface-»
import alma.«getPackage(this).name».«eInterface.name»;
import alma.«getPackage(this).name».«eInterface.name»Operations;
«ENDFOREACH-»

public class «eElement.name» implements ComponentLifecycle«FOREACH getERealizations(eElement) AS eInterface-», «eInterface.name»Operations«ENDFOREACH»
{

	private ContainerServices m_containerServices;
    private Logger m_logger;
		
    /////////////////////////////////////////////////////////////
	// Implementation of ComponentLifecycle
	/////////////////////////////////////////////////////////////
	 
	public void initialize(ContainerServices containerServices)
	{
		m_containerServices = containerServices;
		m_logger = m_containerServices.getLogger();
        m_logger.info("initialize() called...");
     }
	
	public void execute() 
	{
        m_logger.info("execute() called...");
    }
    
    public void cleanUp() 
    {
        m_logger.info("cleanUp() called...");
    }
    
    public void aboutToAbort() 
    {
        cleanUp();
        m_logger.info("aboutToAbort() called...");
    }
    
	/////////////////////////////////////////////////////////////
	// Implementation of ACSComponent
	/////////////////////////////////////////////////////////////

    public ComponentStates componentState() 
    {
        return m_containerServices.getComponentStateManager().getCurrentState();
    }
    
    public String name() 
    {
        return m_containerServices.getName();
    }
   
	«FOREACH getERealizations(eElement) AS eInterface-»
	/////////////////////////////////////////////////////////////
	// Implementation of «eInterface.name»Operations
	/////////////////////////////////////////////////////////////
	
	«FOREACH eInterface.getOperations() AS eOperation-»
	public «getJavaReturnType(eOperation)» «eOperation.name-»(«FOREACH eOperation.ownedParameter.select(e|e.direction.toString()!= 'return') AS param SEPARATOR ', '-»«getJavaParam(param)» «param.name»«ENDFOREACH-») 
    {
    	«IF !isVoid(eOperation)»return «getReturnValue(eOperation)»;«ENDIF»  
	}
	
	«ENDFOREACH-»
	
	«ENDFOREACH-»
} 
«ENDFILE»
«ENDFOREACH»
«ENDDEFINE»