#*******************************************************************************
# ACS Component Code Generator - http://code.google.com/p/acsccg/
# Copyright (C) 2010  Alexis Tejeda, alexis.tejeda@gmail.com
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
#  who       	when      		what
# ----------    ----------      ----------------------
# atejeda 		2011-01-03  	Created
# 
# $Id$
#

#*******************************************************************************
# Get the differences of the code generated between two versions
# param version1 		: the version to compare		e.g.: 223
# param version2=HEAD	: the version to compare		e.g.: 238
#*******************************************************************************
#!/bin/bash

#
# STATIC VARS TO USE
#--------------------
DIFF=diff
MAKE=make
SVN=svn
WORKINGDIR=`pwd`
SVNSERVER=http://acsccg.googlecode.com/svn/trunk/acsccg
TEMPDIR=.ccgdifftemp
TEMPSUFIX=

#
# VAR DEFINITIONS
#--------------------
VERSION1= # version 1
VERSION2= # version 2

#
# FUNCTIONS
#--------------------

#
# PRINT A HELP
#--------------------
function printhelp
{
	echo ""
	echo " == Get the differences of the code generated between two versions"
	echo " Usage: $0 {version1} [version2]"
	echo " - param1 version1 : the version to compare e.g.: 223"
	echo " - param2 version2=HEAD : the version to compare e.g.: 238"
	echo " e.g.: $0  223 238"
	echo ""
}

#
# PARSE DIFF FILES TO HTML
#------------------------------
function diff2html
{
	# TODO
	echo ""
}

#
# CHECK ARG 1
#--------------------
if [ "$1" = "" ]
then
	echo ""
	echo " == Put the version to compare.. end execution.."
	printhelp
	exit 1
else
	VERSION1="$1"
fi

#
# CHECK ARG 2
#--------------------
if [ "$2" = "" ]
then
	VERSION2=HEAD
else
	VERSION2="$2"
fi

#
# LIFECYCLE
#--------------------
# Setup
mkdir $TEMPDIR

#
# PRINT A SUMMARY
#--------------------
echo ""
echo " == Using $VERSION1 vs $VERSION2"

#
# GET VERSION 1
#--------------------
echo ""
if [ ! -d "$TEMPDIR/$VERSION1" ]; then
	echo " == Checking out the revision $VERSION1 "
	echo "" >>  "$TEMPDIR/$VERSION1.log"
	echo " == Checking out the revision " >>  "$TEMPDIR/$VERSION1.log"
	$SVN checkout -r $VERSION1 $SVNSERVER $TEMPDIR/$VERSION1 > "$TEMPDIR/$VERSION1.log"
else
	echo " == The revision $VERSION2 is already checked out: $WORKINGDIR/$TEMPDIR/$VERSION1 "
fi	

#
# GET VERSION 2
#--------------------
echo ""
if [ ! -d "$TEMPDIR/$VERSION2" ]; then
	echo " == Checking out the revision $VERSION2 "
	echo "" >>  "$TEMPDIR/$VERSION2.log"
	echo " == Checking out the revision " >>  "$TEMPDIR/$VERSION2.log"
	$SVN checkout -r $VERSION2 $SVNSERVER $TEMPDIR/$VERSION2 > "$TEMPDIR/$VERSION2.log"
else
	echo " == The revision $VERSION2 is already checked out: $WORKINGDIR/$TEMPDIR/$VERSION2 "	
fi

#
# CHECK IF XMI FILE ARE THE SAME VERSION
#---------------------------------------
# get last change revision
DATER1= $SVN info $TEMPDIR/$VERSION1/test/xmi | grep 'Last Changed Rev'
DATER2= $SVN info $TEMPDIR/$VERSION2/test/xmi | grep 'Last Changed Rev'
# test and
if [ "$DATER1" != "$DATER2" ]
then
	echo " == Differents versions of XMI files"
	exit 1
fi

#
# BUILD THE VERSIONS
#--------------------
# Version 1
echo ""
echo "" >>  "$TEMPDIR/$VERSION1.log"
echo " == Build " >>  "$TEMPDIR/$VERSION1.log"
echo " == Build version $VERSION1"
$MAKE -C $TEMPDIR/$VERSION1/src >> "$TEMPDIR/$VERSION1.log"

# Version 2
echo ""
echo " == Build version $VERSION2"
echo "" >>  "$TEMPDIR/$VERSION2.log"
echo " == Build " >>  "$TEMPDIR/$VERSION2.log"
$MAKE -C $TEMPDIR/$VERSION2/src >> "$TEMPDIR/$VERSION2.log"

#
# CLEAN SVN FILES
#--------------------
echo ""
echo " == Cleaning non important files..."
find $TEMPDIR -name '.svn' | xargs rm -r

#
# GENERATE THE CODE
#--------------------
# for revision 1
# check if the code is already generated
echo ""
echo " == Generating the code for revision $VERSION1" # only eltins prototype is generated for now...
echo "" >>  "$TEMPDIR/$VERSION1.log"
echo " == Generating the code" >> "$TEMPDIR/$VERSION1.log"
# cleaning the generated code before
rm -rf $TEMPDIR/$VERSION1/test/output
# generating the code
$MAKE eltins_prototype -C $TEMPDIR/$VERSION1/test >> "$TEMPDIR/$VERSION1.log"

# for revision 2
# check if the code is already generated

echo ""
echo " == Generating the code for revision $VERSION2" # only eltins prototype is generated for now...
echo "" >>  "$TEMPDIR/$VERSION1.log"
echo " == Generating the code" >>  "$TEMPDIR/$VERSION2.log"
# cleaning the generated code before
rm -rf $TEMPDIR/$VERSION2/test/output
# generating the code
$MAKE eltins_prototype -C $TEMPDIR/$VERSION2/test  >> "$TEMPDIR/$VERSION2.log"

#
# GENERATE THE SUMMARY OF DIFFS
#------------------------------
echo ""
echo " == Generating the summary of diffs"
diff $TEMPDIR/$VERSION1/test/output $TEMPDIR/$VERSION2/test/output -r -q > diff_summary.txt

#
# GENERATE THE DIFFS IN TWO COLUMS
#---------------------------------
echo ""
echo " == Generating the diffs in two columns"
diff $TEMPDIR/$VERSION1/test/output $TEMPDIR/$VERSION2/test/output -r -y > diffs.txt

# end lifecycle
echo ""
echo " == Done"
echo ""

#___o0o___