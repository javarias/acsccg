/**
 * ACS Component Code Generator - http://code.google.com/p/acsccg/
 * Copyright (C) 2010  Alexis Tejeda, alexis.tejeda@gmail.com
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * who     		when      		what
 * --------		--------		----------------------------------------------
 * atejeda 		2010-00-00  	Created
 * 
 * $Id: common.ext 170 2011-01-13 13:07:52Z alexis.tejeda $
 */
 
import uml;
import AlmaGenerator;
import ecore;

/**
 * Check if the element has a EtopicError
 * @param Element
 * @return Boolean
 */
boolean isEException(Element element): 
	!element.getAppliedStereotypes().select(e|e.name == 'EException').isEmpty;

/**
 * Check if the element has a EtopicSequence
 * @param Element
 * @return Boolean
 */
boolean isETopicSequence(Element element): 
	!element.getAppliedStereotypes().select(e|e.name == 'ETopicSequence').isEmpty;

/**
 * Check if the element has a typeModifier
 * @param Element
 * @return Boolean
 */
boolean isETypeModifier(Element eElement): 
	!eElement.getAppliedStereotypes().select(e|e.name == 'typeModifier').isEmpty;

/**
 * Get the baci correct name
 * @param Element
 * @return String
 */
String getBaciType(Element eElement): 
	if isETypeModifier(eElement) && eElement.type.name == 'long'
	then eElement.type.name.toLowerCase()+'Seq'
	else eElement.type.name.toLowerCase();

/**
 * Check if the element is a component definition
 * @param Element
 * @return Boolean
 */
boolean isEComponent(Element element): 
	!element.getAppliedStereotypes().select(e|e.name == 'EComponent').isEmpty;

/**
 * @deprecated
 * Check if the element is a component implementation
 * @param Element
 * @return Boolean
 */
boolean isEComponentImpl(Element element): 
	!element.getAppliedStereotypes().select(e|e.name == 'EComponentImpl').isEmpty;

/**
 * Check if the element is a Interface
 * @param Element
 * @return Boolean
 */
boolean isEInteface(Element element): 
	!element.getAppliedStereotypes().select(e|e.name == 'EInterface').isEmpty;

/**
 * Check if the element is a container
 * @param Element
 * @return Boolean
 */
boolean isEContainer(Element element): 
	!element.getAppliedStereotypes().select(e|e.name == 'EContainer').isEmpty;

/**
 * Check if the class is a enumeration
 * @param Element
 * @return Boolean
 */
boolean isEEnumeration(Element element): 
	!element.getAppliedStereotypes().select(e|e.name == 'EEnumeration').isEmpty;

/**
 * Check if the element is a topic
 * @param Element
 * @return Boolean
 */
boolean isETopic(Element element): 
	!element.getAppliedStereotypes().select(e|e.name == 'ETopic').isEmpty;
	
/**
 * Check if the element is a module
 * @param Element
 * @return Boolean
 */
boolean isEModule(Element element): 
	!element.getAppliedStereotypes().select(e|e.name == 'EModule').isEmpty;
	
/**
 * Check if the element is a EReadOnlyProperty
 * @param Element
 * @return Boolean
 */
boolean isEReadOnlyProperty(Element element): 
	!element.getAppliedStereotypes().select(e|e.name == 'EReadOnlyProperty').isEmpty;
	
/**
 * Check if the element is a EReadWriteProperty
 * @param Element
 * @return Boolean
 */
boolean isEReadWriteProperty(Element element): 
	!element.getAppliedStereotypes().select(e|e.name == 'EReadWriteProperty').isEmpty;

/**
 * Get the package name from the glovar var
 * ACSPackage already defined in the templates
 * @return String
 */	
String getPackage():
	((String)GLOBALVAR ACSPackage);

/**
 * Get the package object reference to generate
 * @param Model
 * @return Package
 */	
Package getPackage(Model model):
	model.allOwnedElements().typeSelect(uml::Package).select(e|e.name == getPackage()).first();
	
/**
 * Get EComponent list from a certain package
 * @param Package
 * @return List
 */
List getEComponents(Package package):
	package.allOwnedElements().select(e|isEComponent(e));
 	
/**
 * @deprected
 * Get EComponentImpl list from a certain package
 * @param Package
 * @return List
 */
List getEComponentsImpl(Package package):
	package.allOwnedElements().select(e|isEComponentImpl(e));
	
/**
 * Get the artifacts list from a certain package
 * this function gets the same that getEComponentsImpl
 * @param Package
 * @return List
 */
List getArtifacts(Package package):
	package.allOwnedElements().select(e|isEComponentImpl(e));
 	
/**
 * Get EInterfaces list from a certain package
 * @param Package
 * @return List
 */
List getEInterfaces(Package package):
	package.allOwnedElements().select(e|isEInteface(e));

/**
 * Get EEContainers list from a certain package
 * @param Package
 */
List getEContainers(Package package):
	package.allOwnedElements().select(e|isEContainer(e));

/**
 * Get EEnumerations list from a certain package
 * @param Package
 * @return List
 */
List getEEnumerations(Package package):
	package.allOwnedElements().select(e|isEEnumeration(e)) ;
 	
/**
 * Get ETopics list from a certain package
 * @param Package
 * @return List
 */
List getETopics(Package package):
	package.allOwnedElements().select(e|isETopic(e));
 	
/**
 * Get EModule list from a certain package
 * @param Package
 * @return List
 */
List getEModules(Model model):
	model.allOwnedElements().select(e|isEModule(e));

/**
 * Get EReadOnlyProperties list from a certain element
 * @param eElement
 * @return List
 */
List getEReadOnlyProperties(Element eElement):
	eElement.allOwnedElements().select(e|isEReadOnlyProperty(e));
	
/**
 * Get EReadWriteProperties list from a certain element
 * @param eElement
 * @return List
 */
List getEReadWriteProperties(Element eElement):
	eElement.allOwnedElements().select(e|isEReadWriteProperty(e));
	
/**
 * Get ETopicSequence list from a certain element
 * @param eElement
 * @return List
 */
List getETopicSequences(Element eElement):
	eElement.allOwnedElements().select(e|isETopicSequence(e));	
	

/**
 * Get the stereotype reference of an Element or uml::Class
 * this method only work with the EProfile stereotypes
 * @param Element
 * @param String
 * @return Stereotype
 */
Stereotype getEStereotypeReference(Element eElement, String eStereotype):
	eElement.getAppliedStereotype('EProfile::'+eStereotype);

/**
 * Get the tag value from a specific applied stereotype
 * @param Element
 * @param String
 * @param String
 * @return String
 */
String getETagValue(Element eElement, String eStereotype, String tag):
	eElement.getValue(getEStereotypeReference(eElement, eStereotype) ,tag);
	
/**
 * Check if the eElement is a ECharacteristicComponent
 * @param eElement
 * @return Boolean
 */
boolean isECharacteristic(Element eElement):
	getETagValue(eElement,'EInterface','configurable');
	
/**
 * Check if the eElement is a ECharacteristicComponentImpl
 * this method is only for artifacts
 * @param eElement
 * @return Boolean
 */
boolean isECharacteristicImpl(Element eElement):
	getETagValue(getERealization(eElement),'EInterface','configurable');

/**
 * Check if the eElement is has any ECharacteristic EInterface
 * this method is only for artifacts
 * @param eElement
 * @return Boolean
 */
boolean hasECharacteristicInterfaces(Element eElement):
	 !getERealizations(eElement).isEmpty && !getERealizations(eElement).select(e|isECharacteristic(e)).isEmpty;
 		
/**
 * Get the manifest List from a certain Artifact
 * this method return the list manifest
 * @param Artifact
 * @return List
 */
List getEManifestations(Artifact eArtifact):
	eArtifact.manifestation;
	
/**
 * Get the supplier of the manifest from the artifact
 * this method return the list of supplier of the artifact
 * @param Manifes
 * @return List
 */
List getESuppliers(Manifestation eManifest):
	eManifest.supplier;

/**
 * Get a list of ETopicError
 * @param Manifes
 * @return List
 */
List getEExceptions(Element eElement):
	eElement.allOwnedElements().select(e|isEException(e));
	
/**
 * Get a list of DiagramInfo
 * @param Manifes
 * @return List
 */
Element getDiagramInfo(Element eElement):
	eElement.allOwnedElements().select(e|isDiagramInfo(e));	
	
/**
 * Get Container (EContainer) Language tag
 * @param eElement
 * @return String
 */
String getContainerLanguage(Element eElement):
	getETagValue(eElement,'EContainer','language').name.toLowerCase();
	
/**
 * Get ETopicError description tag
 * @param eElement
 * @return String
 */
String getEExceptionDescription(Element eElement):
	getETagValue(eElement,'ETopicError','description');
	
/**
 * Get ETopicError shortDescription tag
 * @param eElement
 * @return String
 */
String getEExceptionShortDescription(Element eElement):
	getETagValue(eElement,'ETopicError','shortDescription');

/**
 * Get Artifact (EComponentImpl) Language tag
 * @param eElement
 * @return String
 */
String getEComponentLanguage(Element eElement):
	getETagValue(eElement,'EComponentImpl','language').name.toLowerCase();
	
/**
 * Get list of used interfaces in the EComponentImpl
 * @param eElement
 * @return List
 */
List getERealizations(Element eElement):
	((uml::Interface) getESuppliers(getEManifestations(eElement).first()).first()).getImplementedInterfaces();
	
/**
 * Get the comment
 * @param eElement
 * @return String
 */
String getComment(Element eElement): 
	eElement.ownedComment.first().body;
	
/**
 * Check the element has comments
 * @param eElement
 * @return Boolean
 */
boolean hasComment(Element eElement): 
	!eElement.ownedComment.isEmpty;
	
/**
 * Return full actual date
 * @return String
 */
String getFullActualDate(): 
	JAVA alma.acsccg.util.xtend.JavaExtension.getFullActualDate();
	
/**
 * Return full actual date for the comments
 * @return String
 */
String getCommentDate(): 
	JAVA alma.acsccg.util.xtend.JavaExtension.getCommentDate();	
	
/**
 * Return the comments wrapped as a List<String>
 * @return List
 */
List getCommentsWrapped(String comments): 
	JAVA alma.acsccg.util.xtend.JavaExtension.getCommentsWrapped(java.lang.String);
	
/**
 * Return the list of raisedExceptions
 * @param eElement
 * @return String
 */
List getRaisedExceptions(Operation eElement): 
	eElement.raisedException;

/**
 * Return the first realization
 * @param eElement
 * @return Element
 */
Element getERealization(Element eElement):
	getERealizations(eElement).first();

