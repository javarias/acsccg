/**
 * ACS Component Code Generator - http://code.google.com/p/acsccg/
 * Copyright (C) 2010  Alexis Tejeda, alexis.tejeda@gmail.com
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * who     		when      		what
 * --------		--------		----------------------------------------------
 * atejeda 		2010-00-00  	Created
 * 
 * $Id: idl.ext 170 2011-01-13 13:07:52Z alexis.tejeda $
 */
 
import uml;
import AlmaGenerator;
import ecore;

extension acsccg::templates::util::common;

/**
 * Check if the element has a EPublish
 * @param Element
 * @return Boolean
 */
boolean isEPublish(Element element): 
	!element.getAppliedStereotypes().select(e|e.name == 'EPublish').isEmpty;
	
/**
 * Check if the element has a ESubscribe
 * @param Element
 * @return Boolean
 */
boolean isESubscribe(Element element): 
	!element.getAppliedStereotypes().select(e|e.name == 'ESubscribe').isEmpty;

/**
 * Get EPublishers list from a certain element
 * @param eElement
 * @return List
 */	
List getEPublishers(Element eElement):
	eElement.allOwnedElements().select(e|isEPublish(e));

/**
 * Get ESubscribe list from a certain element
 * @param eElement
 * @return List
 */	
List getESubscribers(Element eElement):
	eElement.allOwnedElements().select(e|isESubscribe(e));

/**
 * Get Notification Channel definition list 
 * from a certain element
 * @param eElement
 * @return List
 */		
List getNCDefinitions(Element eElement):
	eElement.allOwnedElements().select(e|isESubscribe(e) || isEPublish(e));

/**
 * Check if in the model exist Notification Channel 
 * definition in the model
 * @param Element
 * @return Boolean
 */	
boolean	hasNCDefinitions(Element eElement):
	!getNCDefinitions(eElement).isEmpty;
	
/**
 *
 */	
boolean	hasEPublishers(Element eElement):
	!getEPublishers(eElement).isEmpty;

/**
 *
 */	
boolean	hasESubscribers(Element eElement):
	!getESubscribers(eElement).isEmpty;

/**
 * 
 */
Element getSequenceType(Element eElement): 
	eElement.getAllAttributes().first().type.name;

/**
 * 
 */
Element getParent(Interface eElement): 
	eElement.allParents().first();
	
/**
 * 
 */
List getParents(Interface eElement): 
	eElement.parents();
	
/**
 * 
 */
List getAllParents(Interface eElement): 
	eElement.allParents();

/**
 * 
 */
boolean hasParent(Interface eElement): 
	!eElement.allParents().isEmpty;

/**
 * 
 */
List getROProperties(Interface eElement): 
	eElement.getAllAttributes().select(e|e.isReadOnly).select(e|!isEReadOnlyProperty(e)).select(e|!isEReadWriteProperty(e)).select(e|!e.isStatic);
	
/**
 * 
 */
List getStaticProperties(Interface eElement): 
	eElement.getAllAttributes().select(e|e.isStatic).select(e|!isEReadOnlyProperty(e)).select(e|!isEReadWriteProperty(e)).select(e|!e.isReadOnly);

/**
 * 
 */
Parameter getReturnParameter(Operation this): 
	ownedParameter.select(e|e.direction.toString()== 'return').first();

/**
 * 
 */	
boolean hasModifier(Parameter this): 
	!getAppliedStereotypes().select(e|e.name == "typeModifier").isEmpty;

/**
 * 
 */	
string getIDLCorrectCase(Parameter this):
    if type.name == 'Boolean' || type.name == 'Long' || type.name == 'Double' || type.name == 'Float' || type.name == 'Char'|| type.name == 'String'  
    then type.name.toLowerCase()
    else type.name; 
    
/**
 * 
 */	
string getIDLCorrectCaseString(String str, Model model):
    if str.toLowerCase() == 'boolean' || str.toLowerCase() == 'long' || str.toLowerCase() == 'double' || str.toLowerCase() == 'float' || str.toLowerCase() == 'char'|| str.toLowerCase() == 'string'  
    	then str.toLowerCase()
    else if getPackage(model).allOwnedElements().typeSelect(uml::Signal).select(e|e.name == str).isEmpty
    	then getPackage(model).getModel().allOwnedElements().typeSelect(uml::Signal).select(e|e.name == str).first().package.name+"::"+str
    else str;
    
/**
 * 
 */	
string getIDLCorrectCaseString(String str):
    if str.toLowerCase() == 'boolean' || str.toLowerCase() == 'long' || str.toLowerCase() == 'double' || str.toLowerCase() == 'float' || str.toLowerCase() == 'char'|| str.toLowerCase() == 'string'  
    	then str.toLowerCase()
    else str;

/**
 * 
 */
string getIDLReturnType(Operation this):
    if hasModifier(getReturnParameter(this))
    then (getIDLCorrectCase(getReturnParameter(this)) + "Sequence").trim()
    else getIDLCorrectCase(getReturnParameter(this)).trim();
    
/**
 * 
 */	
string getCorrectIDLSyntax(String str, Model model):
    if getPackage(model).allOwnedElements().typeSelect(uml::Interface).select(e|e.name == str).isEmpty
    then getPackage(model).getModel().allOwnedElements().typeSelect(uml::Interface).select(e|e.name == str).first().package.name+"::"+str
    else str;
    
/**
 * 
 */	
boolean isACSInterface(String str, Model model):
    getPackage(model).getModel().allOwnedElements().typeSelect(uml::Interface).select(e|e.name == str).first().package.name.toLowerCase() == 'acs';
    