#*******************************************************************************
# ACS Component Code Generator - http://code.google.com/p/acsccg/
# Copyright (C) 2010
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
#  who       	when      		what
# 
# atejeda 		2011-01-09  	Created
#
# $Id$
# 

# General Vars
ENVDIR=$(shell pwd)
JCLI=java
MAKECLI=make
LIBF=../bin
EXF=../test/xmi
EXTRAFLAGS=-d
ACSCCG=$(LIBF)/acsComponentCodeGenerator.jar $(EXTRAFLAGS)

# Model list target, modelname_emodule
MODELS_TARGETS= eltins_prototype \
		example_notificationChannel

# Code Generation Testing variables
PROFILE_XMI=EProfile.profile.uml
OUTPUT_PATH=output
XMI_PATH=xmi
MODEL_PATH=model
PROFILE_PATH =../include/xmi

all:
		@echo ""
		@echo " Targets"
		@echo " ###########################################"
		@echo " test: clean the output and generate the code from the models (XMI)."
		@echo " cleanxmi: clean the xmi files manually exported from MD models."
		@echo " cleanoutput: clean all the code generated in the ouput folder."
		@echo " cleanmd: clean all the *.mdzip.backup and *.mdr generated by MD"
		@echo " generatemodels: generate all test models for self targets:"
		@echo " 	eltins: ELT Ins Prototype"
		@echo ""

test: cleanoutput generatemodels

cleanxmi:
		@echo ""
		@rm -rf $(XMI_PATH)/*
		@echo "# XMI folders cleaned"
		@echo "###########################################"
		@echo ""

cleanoutput:
		@echo ""
		@rm -rf $(OUTPUT_PATH)/*
		@echo "# Output folders cleaned"
		@echo "###########################################"
		@echo ""

cleanmd:
		@echo ""
		@find $(MODEL_PATH) -name '.mdr' | xargs rm -r
		@find $(MODEL_PATH) -name '.mdzip.back' | xargs rm -r
		@find ../$(PROFILE_PATH) '.mdr' | xargs rm -r 
		@find ../$(PROFILE_PATH) '.mdzip.back' | xargs rm -r
		@echo "# MagicDraw .mdr and .mdzip.back of models"
		@echo "# folders and profile path cleaned"
		@echo "###########################################"

generatemodels:
		@echo ""
		@echo "# Generating the models"
		@echo "###########################################"
		@for modeltarget in $(MODELS_TARGETS); do \
			$(MAKECLI) -C $(ENVDIR) $$modeltarget; \
		done
		@echo ""
		@echo "Done."
		@echo ""

# Testing targets

eltins_prototype:
		@echo ""
		@echo "# Running eltins prototype"
		@echo "###########################################"
		@echo ""
		@echo "$(JCLI) -jar $(ACSCCG) -m $(XMI_PATH)/ELT/ELT-InsPrototype.uml -p $(PROFILE_PATH)/$(PROFILE_XMI) -o $(OUTPUT_PATH) -e prototype" 
		@$(JCLI) -jar $(ACSCCG) -m $(XMI_PATH)/ELT/ELT-InsPrototype.uml -p $(PROFILE_PATH)/$(PROFILE_XMI) -o $(OUTPUT_PATH) -e prototype
		@echo ""
		@echo "--eltins prototype generated"
		@echo ""

eltins_ACS:
		@echo ""
		@echo "# Running eltins ACS"
		@echo "###########################################"
		@echo ""
		@echo "$(JCLI) -jar $(ACSCCG) -m $(XMI_PATH)/ELT/ELT-InsPrototype.uml -p $(PROFILE_PATH)/$(PROFILE_XMI) -o $(OUTPUT_PATH) -e ACS" 
		@$(JCLI) -jar $(ACSCCG) -m $(XMI_PATH)/ELT/ELT-InsPrototype.uml -p $(PROFILE_PATH)/$(PROFILE_XMI) -o $(OUTPUT_PATH) -e ACS
		@echo ""
		@echo "--eltins ACS generated"
		@echo ""

example_singleComponent:
		@echo ""
		@echo "# Running Example example_singleComponent"
		@echo "###########################################"
		@echo ""
		@echo "$(JCLI) -jar $(ACSCCG) -m $(XMI_PATH)/examples/examples.uml -p $(PROFILE_PATH)/$(PROFILE_XMI) -o $(OUTPUT_PATH) -e singleComponent" 
		@$(JCLI) -jar $(ACSCCG) -m $(XMI_PATH)/examples/examples.uml -p $(PROFILE_PATH)/$(PROFILE_XMI) -o $(OUTPUT_PATH) -e singleComponent
		@echo ""
		@echo "--example_singleComponentgenerated"
		@echo ""

example_characteristicComponent:
		@echo ""
		@echo "# Running Example example_characteristicComponent"
		@echo "###########################################"
		@echo ""
		@echo "$(JCLI) -jar $(ACSCCG) -m $(XMI_PATH)/examples/examples.uml -p $(PROFILE_PATH)/$(PROFILE_XMI) -o $(OUTPUT_PATH) -e characteristicComponent" 
		@$(JCLI) -jar $(ACSCCG) -m $(XMI_PATH)/examples/examples.uml -p $(PROFILE_PATH)/$(PROFILE_XMI) -o $(OUTPUT_PATH) -e characteristicComponent
		@echo ""
		@echo "--example_characteristicComponent generated"
		@echo ""

example_javaInterfaces:
		@echo ""
		@echo "# Running Example example_javaInterfaces"
		@echo "###########################################"
		@echo ""
		@echo "$(JCLI) -jar $(ACSCCG) -m $(XMI_PATH)/examples/examples.uml -p $(PROFILE_PATH)/$(PROFILE_XMI) -o $(OUTPUT_PATH) -e javaInterfaces" 
		@$(JCLI) -jar $(ACSCCG) -m $(XMI_PATH)/examples/examples.uml -p $(PROFILE_PATH)/$(PROFILE_XMI) -o $(OUTPUT_PATH) -e javaInterfaces
		@echo ""
		@echo "--example_javaInterfaces generated"
		@echo ""

example_inheritance:
		@echo ""
		@echo "# Running Example example_inheritance"
		@echo "###########################################"
		@echo ""
		@echo "$(JCLI) -jar $(ACSCCG) -m $(XMI_PATH)/examples/examples.uml -p $(PROFILE_PATH)/$(PROFILE_XMI) -o $(OUTPUT_PATH) -e inheritance" 
		@$(JCLI) -jar $(ACSCCG) -m $(XMI_PATH)/examples/examples.uml -p $(PROFILE_PATH)/$(PROFILE_XMI) -o $(OUTPUT_PATH) -e inheritance
		@echo ""
		@echo "--example_inheritance generated"
		@echo ""

example_notificationChannel:
		@echo ""
		@echo "# Running Example example_notificationChannel"
		@echo "###########################################"
		@echo ""
		@echo "$(JCLI) -jar $(ACSCCG) -m $(XMI_PATH)/examples/examples.uml -p $(PROFILE_PATH)/$(PROFILE_XMI) -o $(OUTPUT_PATH) -e notificationChannel" 
		@$(JCLI) -jar $(ACSCCG) -m $(XMI_PATH)/examples/examples.uml -p $(PROFILE_PATH)/$(PROFILE_XMI) -o $(OUTPUT_PATH) -e notificationChannel
		@echo ""
		@echo "--example_notificationChannel generated"
		@echo ""
		


