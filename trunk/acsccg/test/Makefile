#*******************************************************************************
# ACS Component Code Generator - http://code.google.com/p/acsccg/
# Copyright (C) 2010
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
#  who       	when      		what
# 
# atejeda 		2011-01-09  	Created
#
# $Id$
# 

# General Vars
ENVDIR=$(shell pwd)
JCLI=java
MAKECLI=make
LIBF=../bin
EXF=../test/xmi
EXTRAFLAGS=-d
ACSCCG=$(LIBF)/acsComponentCodeGenerator.jar $(EXTRAFLAGS)

#
# Model list target, modelname_emodule
#-------------------------------------
MODELS_TARGETS= prototype \
				notificationChannel \
				singleComponent

#
# Code Generation Testing variables
#-------------------------------------
PROFILE_XMI=EProfile.profile.uml
OUTPUT_PATH=output
XMI_PATH=xmi
MODEL_PATH=model
PROFILE_PATH =../include/xmi

#
# Makefile common targets
#-------------------------------------

all:
		@echo ""
		@echo " == Targets"
		@echo " test: clean the output and generate the code from the models (XMI)."
		@echo " clean_xmi: clean the xmi files manually exported from MD models."
		@echo " clean_output: clean all the code generated in the ouput folder."
		@echo " clean_md: clean all the *.mdzip.backup and *.mdr generated by MD"
		@echo " generate_all: generate all test models for self targets:"
		@echo " 	prototype: ELT Ins Prototype"
		@echo ""

test: generate_all

clean: clean_md clean_output

clean_xmi:
		@echo ""
		@rm -rf $(XMI_PATH)/*
		@echo " == XMI folders cleaned"
		@echo ""

clean_output:
		@echo ""
		@rm -rf $(OUTPUT_PATH)/*
		@echo " == Output folders cleaned"
		@echo ""

clean_md:
		@echo ""
		@find $(MODEL_PATH) -name '.mdr' | xargs rm -r
		@find $(MODEL_PATH) -name '.mdzip.back' | xargs rm -r
		@find ../$(PROFILE_PATH) '.mdr' | xargs rm -r 
		@find ../$(PROFILE_PATH) '.mdzip.back' | xargs rm -r
		@echo " == MagicDraw .mdr and .mdzip.back of models"
		@echo " == folders and profile path cleaned"
		@echo ""

generate_all:
		@echo ""
		@echo " == Generating the models"
		@for modeltarget in $(MODELS_TARGETS); do \
			$(MAKECLI) -C $(ENVDIR) $$modeltarget; \
		done
		@echo ""
		@echo "Done."
		@echo ""

#
# Testing targets
#----------------

prototype:
		@echo ""
		@echo " == Running eltins prototype"
		@echo ""
		@echo "$(JCLI) -jar $(ACSCCG) -m $(XMI_PATH)/ELT/ELT-InsPrototype.uml -p $(PROFILE_PATH)/$(PROFILE_XMI) -o $(OUTPUT_PATH) -e prototype" 
		@$(JCLI) -jar $(ACSCCG) -m $(XMI_PATH)/ELT/ELT-InsPrototype.uml -p $(PROFILE_PATH)/$(PROFILE_XMI) -o $(OUTPUT_PATH) -e prototype
		@echo ""
		@echo " == eltins prototype generated"
		@echo ""

singleComponent:
		@echo ""
		@echo " == Running Example singleComponent"
		@echo ""
		@echo "$(JCLI) -jar $(ACSCCG) -m $(XMI_PATH)/examples/examples.uml -p $(PROFILE_PATH)/$(PROFILE_XMI) -o $(OUTPUT_PATH) -e singleComponent" 
		@$(JCLI) -jar $(ACSCCG) -m $(XMI_PATH)/examples/examples.uml -p $(PROFILE_PATH)/$(PROFILE_XMI) -o $(OUTPUT_PATH) -e singleComponent
		@echo ""
		@echo " == singleComponent generated"
		@echo ""

characteristicComponent:
		@echo ""
		@echo " == Running Example characteristicComponent"
		@echo ""
		@echo "$(JCLI) -jar $(ACSCCG) -m $(XMI_PATH)/examples/examples.uml -p $(PROFILE_PATH)/$(PROFILE_XMI) -o $(OUTPUT_PATH) -e characteristicComponent" 
		@$(JCLI) -jar $(ACSCCG) -m $(XMI_PATH)/examples/examples.uml -p $(PROFILE_PATH)/$(PROFILE_XMI) -o $(OUTPUT_PATH) -e characteristicComponent
		@echo ""
		@echo " == characteristicComponent generated"
		@echo ""

javaInterfaces:
		@echo ""
		@echo " == Running Example javaInterfaces"
		@echo ""
		@echo "$(JCLI) -jar $(ACSCCG) -m $(XMI_PATH)/examples/examples.uml -p $(PROFILE_PATH)/$(PROFILE_XMI) -o $(OUTPUT_PATH) -e javaInterfaces" 
		@$(JCLI) -jar $(ACSCCG) -m $(XMI_PATH)/examples/examples.uml -p $(PROFILE_PATH)/$(PROFILE_XMI) -o $(OUTPUT_PATH) -e javaInterfaces
		@echo ""
		@echo " == javaInterfaces generated"
		@echo ""

inheritance:
		@echo ""
		@echo " == Running Example inheritance"
		@echo ""
		@echo "$(JCLI) -jar $(ACSCCG) -m $(XMI_PATH)/examples/examples.uml -p $(PROFILE_PATH)/$(PROFILE_XMI) -o $(OUTPUT_PATH) -e inheritance" 
		@$(JCLI) -jar $(ACSCCG) -m $(XMI_PATH)/examples/examples.uml -p $(PROFILE_PATH)/$(PROFILE_XMI) -o $(OUTPUT_PATH) -e inheritance
		@echo ""
		@echo " == inheritance generated"
		@echo ""

notificationChannel:
		@echo ""
		@echo " == Running Example notificationChannel"
		@echo ""
		@echo "$(JCLI) -jar $(ACSCCG) -m $(XMI_PATH)/examples/examples.uml -p $(PROFILE_PATH)/$(PROFILE_XMI) -o $(OUTPUT_PATH) -e notificationChannel" 
		@$(JCLI) -jar $(ACSCCG) -m $(XMI_PATH)/examples/examples.uml -p $(PROFILE_PATH)/$(PROFILE_XMI) -o $(OUTPUT_PATH) -e notificationChannel
		@echo ""
		@echo " == notificationChannel generated"
		@echo ""

#___o0o___