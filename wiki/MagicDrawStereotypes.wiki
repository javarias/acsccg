#summary The actual stereotypes used by Magic-Draw

  * `<<enumeration>>`: UML class is implemented as an enumeration and is generatedin a common IDL file.
  * `<<idlstruct>>`: UML class is implemented as an IDL struct generated in a commonIDL file.
 * `<<characteristic>>`: The UML class is implemented as a Characteristic Compo-nent of ACS.
 * `<<override>>`: If the UML class is inherited, the generator overrides the parent methods (of the UML model) in the actual class, this only is applied to Java classes and not to the IDL interfaces and is implemented as a ACS component.
 * `<<alloverride>>`: Same as the override stereotype, if the class has a multi-inherited-level, the generator overrides all methods inherited in all levels in the UML model and is implemented as a ACS component, this only is applied to Java classes and not to the IDL interfaces.
 * `<<container>>`: The UML class is defined as a ACS container, the generator reads a property called ‘language‘ to know the language of the container (i.e.: language = java) and generate the necessary code to implement this container.
 * `<<ncconfig>>`: If the UML class has this stereotype, the generator reads the channels to implement (properties in the UML class) in the code, this channels are defined in the common IDL file of the code generated.
 * `<<ncsupplier>>`: The UML class is implemented as a ACS component event supplier and use a common channel that has the same name of the project.
 * `<<ncconsumer>>`: The UML class is implemented as a ACS component event consumer and use a common channel that has the same name of the project.
 * `<<nchybrid>>`: The UML class is implemented as a ACS component event supplier-consumer and use a common channel that has the same name of the project.
 * `<<void>>`: If this stereotype is implemented, the generator will void generate the class.